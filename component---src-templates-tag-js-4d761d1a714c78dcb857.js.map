{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["TagTemplate","render","data","this","props","siteTitle","site","siteMetadata","title","icons","posts","allMarkdownRemark","edges","location","map","node","frontmatter","fields","slug","tags","key","style","marginBottom","rhythm","boxShadow","to","date","fontSize","float","views","forEach","tag","i","icon","push","path","name","color","tagView","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery"],"mappings":"+OAQMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKI,KAAKC,aAAaE,MAC/BC,EAAQR,EAAKS,kBAAkBC,MAsBrC,OACE,kBAAC,IAAD,CAAQC,SAAUV,KAAKC,MAAMS,SAAUL,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cACVE,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAC9CC,EAAOJ,EAAKC,YAAYG,KAC9B,OACE,6BAASC,IAAKL,EAAKE,OAAOC,MACxB,gCACE,wBACEG,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAU,QAAWC,GAAIV,EAAKE,OAAOC,MACjDV,IAGL,+BACGO,EAAKC,YAAYU,KAClB,yBAAKL,MAAO,CAAEM,SAAU,GAAIC,MAAO,UAxCjC,SAAAT,GACd,IAAMU,EAAQ,GAgBd,OAfAV,EAAKW,SAAQ,SAACC,EAAKC,GACjBvB,EAAMqB,SAAQ,SAAAG,GACRF,IAAQE,EAAKF,KACfF,EAAMK,KACJ,kBAAC,IAAD,CACEd,IAAKY,EACLD,IAAKE,EAAKF,IACVI,KAAMF,EAAKE,KACXC,KAAMH,EAAKG,KACXC,MAAOJ,EAAKI,eAMfR,EAwBQS,CAAQnB,MAIf,iCACE,uBACEoB,wBAAyB,CACvBC,OAAQzB,EAAKC,YAAYyB,aAAe1B,EAAK2B,kB,GAvDvCC,IAAMC,WAmEjB5C,YAER,IAAM6C,EAAS","file":"component---src-templates-tag-js-4d761d1a714c78dcb857.js","sourcesContent":["import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Tag from \"../components/tag\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nclass TagTemplate extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const icons = data.site.siteMetadata.icons\r\n    const posts = data.allMarkdownRemark.edges\r\n\r\n    const tagView = tags => {\r\n      const views = []\r\n      tags.forEach((tag, i) => {\r\n        icons.forEach(icon => {\r\n          if (tag === icon.tag)\r\n            views.push(\r\n              <Tag\r\n                key={i}\r\n                tag={icon.tag}\r\n                path={icon.path}\r\n                name={icon.name}\r\n                color={icon.color}\r\n              />\r\n            )\r\n        })\r\n      })\r\n\r\n      return views\r\n    }\r\n\r\n    return (\r\n      <Layout location={this.props.location} title={siteTitle}>\r\n        <SEO title=\"All posts\" />\r\n        {posts.map(({ node }) => {\r\n          const title = node.frontmatter.title || node.fields.slug\r\n          const tags = node.frontmatter.tags\r\n          return (\r\n            <article key={node.fields.slug}>\r\n              <header>\r\n                <h3\r\n                  style={{\r\n                    marginBottom: rhythm(1 / 4),\r\n                  }}\r\n                >\r\n                  <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\r\n                    {title}\r\n                  </Link>\r\n                </h3>\r\n                <small>\r\n                  {node.frontmatter.date}\r\n                  <div style={{ fontSize: 25, float: \"right\" }}>\r\n                    {tagView(tags)}\r\n                  </div>\r\n                </small>\r\n              </header>\r\n              <section>\r\n                <p\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: node.frontmatter.description || node.excerpt,\r\n                  }}\r\n                />\r\n              </section>\r\n            </article>\r\n          )\r\n        })}\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TagTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        icons {\r\n          tag\r\n          path\r\n          name\r\n          color\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: 1000\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"YYYY-MM-DD\")\r\n            title\r\n            tags\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}